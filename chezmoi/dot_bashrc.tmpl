{{- template "bash/bashrc" . -}}

function _check_cmd() {
  command -v "$1" &>/dev/null
}

if _check_cmd brew && [ -x $(brew --prefix mise)/bin/mise ]; then
  eval "$($(brew --prefix mise)/bin/mise activate bash)"
  eval "$($(brew --prefix mise)/bin/mise completion bash)"
elif [ -x ~/.local/bin/mise ]; then
  eval "$(~/.local/bin/mise activate bash)"
fi


if ! shopt -oq posix; then
  if [ -f /usr/share/bash-completion/bash_completion ]; then
    . /usr/share/bash-completion/bash_completion
  elif [ -f /etc/bash_completion ]; then
    . /etc/bash_completion
  fi
  if [ -f ~/.local/share/blesh/ble.sh ]; then
    . ~/.local/share/blesh/ble.sh
  fi
fi

if test -n "$KITTY_INSTALLATION_DIR"; then
  export KITTY_SHELL_INTEGRATION="no-rc"
  source "$KITTY_INSTALLATION_DIR/shell-integration/bash/kitty.bash"
fi

if [[ :$SHELLOPTS: =~ :(vi|emacs): ]]; then
  if _check_cmd fzf; then
    if [ -f ~/.local/share/blesh/ble.sh ]; then
      ble-import -d integration/fzf-completion
      ble-import -d integration/fzf-key-bindings
    else
      eval "$(fzf --bash)"
    fi
  fi
  if _check_cmd navi; then
    eval "$(navi widget bash)"
  fi
fi

if [[ $TERM != "dumb" && $TERM != "linux" ]]; then
  if _check_cmd starship; then
    eval "$(starship init bash --print-full-init)"
  else
    # set a fancy prompt (non-color, unless we know we "want" color)
    case "$TERM" in
        xterm-color|*-256color) color_prompt=yes;;
    esac

    # uncomment for a colored prompt, if the terminal has the capability; turned
    # off by default to not distract the user: the focus in a terminal window
    # should be on the output of commands, not on the prompt
    #force_color_prompt=yes

    if [ -n "$force_color_prompt" ]; then
        if [ -x /usr/bin/tput ] && tput setaf 1 >&/dev/null; then
            # We have color support; assume it's compliant with Ecma-48
            # (ISO/IEC-6429). (Lack of such support is extremely rare, and such
            # a case would tend to support setf rather than setaf.)
            color_prompt=yes
        else
            color_prompt=
        fi
    fi

    if [ "$color_prompt" = yes ]; then
        PS1='${debian_chroot:+($debian_chroot)}\[\033[01;32m\]\u@\h\[\033[00m\]:\[\033[01;34m\]\w\[\033[00m\]\$ '
    else
        PS1='${debian_chroot:+($debian_chroot)}\u@\h:\w\$ '
    fi
    unset color_prompt force_color_prompt

    # If this is an xterm set the title to user@host:dir
    case "$TERM" in
    xterm*|rxvt*)
        PS1="\[\e]0;${debian_chroot:+($debian_chroot)}\u@\h: \w\a\]$PS1"
        ;;
    *)
        ;;
    esac
  fi
fi

if _check_cmd chezmoi; then
  eval "$(chezmoi completion bash)"
fi

if _check_cmd zoxide; then
  eval "$(zoxide init bash )"
fi

if _check_cmd wezterm; then
  eval "$(wezterm shell-completion --shell bash)"
fi

if _check_cmd dircolors; then
  eval $(dircolors -b ~/.dir_colors)
fi

if _check_cmd brew; then
  eval "$(brew shellenv)"
fi

if _check_cmd yazi; then
  function yy() {
    local tmp="$(mktemp -t "yazi-cwd.XXXXX")"
    yazi "$@" --cwd-file="$tmp"
    if cwd="$(cat -- "$tmp")" && [ -n "$cwd" ] && [ "$cwd" != "$PWD" ]; then
      builtin cd -- "$cwd"
    fi
    rm -f -- "$tmp"
  }
fi
